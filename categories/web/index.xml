<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>web on Huanghs blog</title>
    <link>https://hhs44.github.io/categories/web/</link>
    <description>Recent content in web on Huanghs blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Tue, 19 May 2020 11:18:37 +0800</lastBuildDate>
    
	<atom:link href="https://hhs44.github.io/categories/web/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Django1.x到django2.x和3.x-踩坑篇</title>
      <link>https://hhs44.github.io/blog/django1.x%E5%88%B0django2.x%E5%92%8C3.x/</link>
      <pubDate>Tue, 19 May 2020 11:18:37 +0800</pubDate>
      
      <guid>https://hhs44.github.io/blog/django1.x%E5%88%B0django2.x%E5%92%8C3.x/</guid>
      <description>最新的版本很多时候都是因为有利于开发而产生的版本，在踩坑结束后新的版本就是自己在开发项目是的神兵利器。踩坑不可避免，踩坑结束就是快乐了。
问题列表：
 pymysql问题（两种方法） 路由变化（和1.x不冲突，新特性） model问题（增加了必须添加的字段）  问题一pymysql问题： 报错为
 django.core.exceptions.ImproperlyConfigured: mysqlclient 1.3.13 or newer is required; you have 0.9.3.  解决： base.py 第 36 行报的错，
根据你的提示路径打开 base.py，
把 35、36 行前面加 # 注释掉就好了
3.0版本只需修改这个一个即可
2.0版本可按照如下修改：</description>
    </item>
    
    <item>
      <title>web基础</title>
      <link>https://hhs44.github.io/blog/web%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Tue, 31 Mar 2020 11:45:23 +0800</pubDate>
      
      <guid>https://hhs44.github.io/blog/web%E5%9F%BA%E7%A1%80/</guid>
      <description>web前端了解篇 web前端是由网页制作演变而来，现在随着互联网的快速发展，前端不只是尽显于图片和文字的静态展示，还需要完成于用户的交互，以及各种功能的集合。
1web前端的主要结构  结构层  指的就是HTML,使用网页标签对代码里的普通文本进行标注，不同的标签显示不同的含义，从而构建整个HTML文档的结构。   表现层  指的是CSS,使用CSS样式来控制HTML标签，例如设置标签的版式、颜色、大小等外观，让整个HTML界面变得更加美观，便于欣赏。   行为层  指的是JavaScript,简称JS. 使用HTML标签可以搭建一个网页的结构，使用CSS可以将HTML文档里的结构更加的美观，但是此时的网页是一个完全静态的，无法实现和用户的交互。使用JS可以实现页面和用户的交互。    2前端开发的核心技术  HTML语言  HTML是一种标记语言，用来结构化我们的网页内容并赋予内容含义，例如定义段落、标题和数据表，或在页面中嵌入图片和视频。
 CSS  CSS 是一种样式规则语言，可将样式应用于 HTML 内容， 例如设置背景颜色和字体，在多个列中布局内容。
 JavaScript  JavaScript 是一种脚本语言，可以用来创建动态更新的内容，控制多媒体，制作图像动画，还有很多。（好吧，虽然它不是万能的，但可以通过简短的代码来实现神奇的功能。）
3前端优化   尽量减少HTTP请求 (Make Fewer HTTP Requests)
  减少DNS 查找 (Reduce DNS Lookups)
  避免重定向 (Avoid Redirects)
  使得 Ajax 可缓存 (Make Ajax Cacheable)
  延迟载入组件 (Post-load Components)</description>
    </item>
    
    <item>
      <title>老知识迁移（二）</title>
      <link>https://hhs44.github.io/blog/%E8%80%81%E7%9F%A5%E8%AF%86%E8%BF%81%E7%A7%BB%E4%BA%8C/</link>
      <pubDate>Sun, 15 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hhs44.github.io/blog/%E8%80%81%E7%9F%A5%E8%AF%86%E8%BF%81%E7%A7%BB%E4%BA%8C/</guid>
      <description></description>
    </item>
    
    <item>
      <title>hibernate（一）简单登陆界面实现</title>
      <link>https://hhs44.github.io/blog/hibernate%E4%B8%80%E7%AE%80%E5%8D%95%E7%99%BB%E9%99%86%E7%95%8C%E9%9D%A2%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Thu, 11 Jul 2019 00:00:00 +0800</pubDate>
      
      <guid>https://hhs44.github.io/blog/hibernate%E4%B8%80%E7%AE%80%E5%8D%95%E7%99%BB%E9%99%86%E7%95%8C%E9%9D%A2%E5%AE%9E%E7%8E%B0/</guid>
      <description>&lt;p&gt;在实训期间无聊，尝试学习一些框架的东西，正好在进行数据处理，我选择了hibernate5作为我操作数据库的框架。（以前做过ssh架构下的网站的课程设计，因为专业不对口没有深入，现在做一个简单回顾也不会深入）&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>