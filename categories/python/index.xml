<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on Huanghs blog</title>
    <link>https://hhs44.github.io/categories/python/</link>
    <description>Recent content in python on Huanghs blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 02 Jul 2020 20:09:25 +0800</lastBuildDate>
    
	<atom:link href="https://hhs44.github.io/categories/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Fastapi入门学习（一）</title>
      <link>https://hhs44.github.io/blog/fastapi%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Thu, 02 Jul 2020 20:09:25 +0800</pubDate>
      
      <guid>https://hhs44.github.io/blog/fastapi%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/</guid>
      <description>fastapi入门学习（一） FastAPI框架是一个高性能，易于学习，高效编码，生产可用的python，web开发框架。
但对于刚开始学习python不久的同学来说仅仅从官文学习，有一定的难度，并咩有那么易学。
本篇主要从一个车辆违章查询的项目，以项目来驱动fastapi的学习。
项目实现效果如下：
查询页面展示：
接口swagger ui界面：
fastapi的安装和简单案例 fastapi框架的安装
pip install fastapi 此外还需要一个能让项目跑起来的服务器，并且需要的是一个ASGI服务器
pip install uvicorn 最简单的fastapi只需要一个文件 创建main.py：这里使用官方代码：
from typing import Optional from fastapi import FastAPI app = FastAPI() @app.get(&amp;#34;/&amp;#34;) def read_root(): return {&amp;#34;Hello&amp;#34;: &amp;#34;World&amp;#34;} @app.get(&amp;#34;/items/{item_id}&amp;#34;) def read_item(item_id: int, q: Optional[str] = None): return {&amp;#34;item_id&amp;#34;: item_id, &amp;#34;q&amp;#34;: q} 保存好后在命令行运行服务器：
uvicorn main:app --reload 访问路径 http://127.0.0.1:8000/docs/，就能看到你的第一个接口的接口文档，如下
车辆查询项目的项目结构 本人也是对fastapi只是入门，对结构的理解暂时如下，该结构并不是一个完整web项目的需求。以后有机会再深入研究。
一一介绍每个部分：
 curd ：数据库的操作，使用sqlalchmey完成，curd即是创建（create），更新（update），读取（read），删除（delete）。 database：完成对数据库的连接。 main：路由函数的位置，可以和flask类比。 models：对数据库表结构类化，和curd，database部分的实现主要参考sqlalchmey。 pagnation：自定义的分页器，完成查询后数据的分页。 schemas：规范约束，响应的或者查询到数据。  完成数据库连接和模型构建部分 这里使用的是mysql，并且使用mysqlclient库，如果使用的pymysql可参见第二种写法，这里创建了database.py文件。
from sqlalchemy import create_engine from sqlalchemy.</description>
    </item>
    
    <item>
      <title>GIL_全局解释锁</title>
      <link>https://hhs44.github.io/blog/gil_%E5%85%A8%E5%B1%80%E8%A7%A3%E9%87%8A%E9%94%81/</link>
      <pubDate>Fri, 05 Jun 2020 19:25:51 +0800</pubDate>
      
      <guid>https://hhs44.github.io/blog/gil_%E5%85%A8%E5%B1%80%E8%A7%A3%E9%87%8A%E9%94%81/</guid>
      <description>技术背景 全局解释器锁(GIL)是一个由编程语言解释器线程持有的互斥锁(全局排他锁)，以避免与其他线程共享不安全的代码。在具有GIL的实现中，每个解释器进程总是有一个GIL。
它是在实现Python解析器(CPython)时所引入的一个概念。
Python中同样一段代码可以通过CPython，PyPy，Psyco等不同的Python执行环境来执行。像其中的JPython就没有GIL。然而因为CPython是大部分环境下默认的Python执行环境。
CPython扩展必须支持GIL，以避免破坏线程。
所以这里要先明确一点：GIL并不是Python的特性，Python完全可以不依赖于GIL.
为什么有GIL?? 为了支持多线程,然而解决多线程之间数据完整性和状态同步的最简单方法自然就是加锁。
有了GIL,python有两个特点:
 进程可以利用多核,但是开销大 多线程开销小,却无法利用多核优势  为什么要改善GIL??   计算密集型：
所谓的计算密集型，就是要进行大量的计算，消耗CPU资源
  IO密集型：
涉及到网络、磁盘IO的任务都是IO密集型任务，这类任务的特点是CPU消耗很少， 任务的大部分时间都在等待IO操作完成（因为IO的速度远远低于CPU和内存的速度）。 对于IO密集型任务，任务越多，CPU效率越高.
  两个线程均为CPU密集型运算线程：
绿色部分表示该线程在运行，且在执行有用的计算
红色部分为线程被调度唤醒，但是无法获取GIL导致无法进行有效运算等待的时间。
IO密集型线程：
当IO线程收到数据包引起终端切换后，仍然由于一个CPU密集型线程的存在，导致无法获取GIL锁，从而进行无尽的循环等待。
Python的多线程在多核CPU上，只对于IO密集型计算产生正面效果；而当有至少有一个CPU密集型线程存在，那么多线程效率会由于GIL而大幅下降。
换句话说只有特别依赖CPU的程序才会对GIL进行改善(如:计算型的程序)
在Python多线程下，每个线程的执行方式：
1.获取GIL
2.执行代码直到sleep或者是python虚拟机将其挂起。
3.释放GIL
可见，某个线程想要执行，必须先拿到GIL，我们可以把GIL看作是“通行证”，并且在一个python进程中，GIL只有一个。拿不到通行证的线程，就不允许进入CPU执行。
什么时候会释放GIL锁  遇到像i/o操作这种有时会有时间空闲的情况造成cpu闲置情况会释放GIL 会有一个专门的ticks进行计数,一旦ticks数值达到100这个时候会释放GIL锁,线程之间开始竞争gil锁(ticks数值可以进行设置)  互斥锁和GIl锁的关系 GIL锁:保证同一时刻只有一个线程能够使用到cpu
互斥锁:多线程是,保证修改共享数据时有序修改,不会产生修改混乱.
解决的方法   使用其他解释器
 失去了利用社区众多C语言模块有用特性的机会。    等待python社区的优化
  和其他语言合作
  用multiprocessing替代Thread multiprocessing库的出现很大程度上是为了弥补thread库因为GIL而低效的缺陷。它完整的复制了一套thread所提供的接口方便迁移。唯一的不同就是它使用了多进程而不是多线程。每个进程有自己的独立的GIL，因此也不会出现进程之间的GIL争抢。
但它的引入会增加程序实现时线程间数据通讯和同步的困难。
实践链接推荐：https://www.cnblogs.com/dachenzi/p/10505567.html
面试题 问：描述Python GIL的概念， 以及它对python多线程的影响？编写一个多线程抓取网页的程序，并阐明多线程抓取程序是否可比单线程性能有提升，并解释其原因。
答:</description>
    </item>
    
    <item>
      <title>Django的模型和数据库</title>
      <link>https://hhs44.github.io/blog/django%E7%9A%84%E6%A8%A1%E5%9E%8B%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93/</link>
      <pubDate>Mon, 25 May 2020 21:23:06 +0800</pubDate>
      
      <guid>https://hhs44.github.io/blog/django%E7%9A%84%E6%A8%A1%E5%9E%8B%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93/</guid>
      <description>模型和数据库  models（模型）： Making queries（进行查询） Aggregation（聚合） search（搜索） managers（管理人员） Performing raw SQL queries（执行原始SQL查询） Database transactions（数据库事务） Multiple databases（多个数据库） Tablespaces（表空间） Database access optimization（数据库访问优化） Database instrumentation（数据库的检测） Examples of model relationship API usage（模型关系API用法示例）  模型  每一个模型都是一个python类，他是django.db.models.Mode的一个子类。 每个模型的属性的要求对应一个数据库的字段。 基于这些Django提供了一个自动生成的数据库访问api。  快速示例 示例中定义了一个Person，包含了name和gender：
# django中的模板定义 from django.db import modelsclass Person（modles.Model）：name = modles.CharField（max_length=30）gender = models.ChatField（max_length=10）# 构建的数据库 CREATE TABLE myapp_person (&amp;#34;id&amp;#34; serial NOT NULL PRIMARY KEY,&amp;#34;name&amp;#34; varchar(30) NOT NULL,&amp;#34;gender&amp;#34; varchar(10) NOT NULL);注：这里的数据库对应的表名是自动生成的，如果想自定义请了解自动设置。</description>
    </item>
    
    <item>
      <title>Django1.x到django2.x和3.x-踩坑篇</title>
      <link>https://hhs44.github.io/blog/django1.x%E5%88%B0django2.x%E5%92%8C3.x/</link>
      <pubDate>Tue, 19 May 2020 11:18:37 +0800</pubDate>
      
      <guid>https://hhs44.github.io/blog/django1.x%E5%88%B0django2.x%E5%92%8C3.x/</guid>
      <description>最新的版本很多时候都是因为有利于开发而产生的版本，在踩坑结束后新的版本就是自己在开发项目是的神兵利器。踩坑不可避免，踩坑结束就是快乐了。
问题列表：
 pymysql问题（两种方法） 路由变化（和1.x不冲突，新特性） model问题（增加了必须添加的字段）  问题一pymysql问题： 报错为
 django.core.exceptions.ImproperlyConfigured: mysqlclient 1.3.13 or newer is required; you have 0.9.3.  解决： base.py 第 36 行报的错，
根据你的提示路径打开 base.py，
把 35、36 行前面加 # 注释掉就好了
3.0版本只需修改这个一个即可
2.0版本可按照如下修改：</description>
    </item>
    
    <item>
      <title>老知识迁移（一）</title>
      <link>https://hhs44.github.io/blog/%E8%80%81%E7%9F%A5%E8%AF%86%E8%BF%81%E7%A7%BB%E4%B8%80/</link>
      <pubDate>Sun, 15 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hhs44.github.io/blog/%E8%80%81%E7%9F%A5%E8%AF%86%E8%BF%81%E7%A7%BB%E4%B8%80/</guid>
      <description>&lt;p&gt;有前端基础，mysql基础，django基础。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>老知识迁移（二）</title>
      <link>https://hhs44.github.io/blog/%E8%80%81%E7%9F%A5%E8%AF%86%E8%BF%81%E7%A7%BB%E4%BA%8C/</link>
      <pubDate>Sun, 15 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hhs44.github.io/blog/%E8%80%81%E7%9F%A5%E8%AF%86%E8%BF%81%E7%A7%BB%E4%BA%8C/</guid>
      <description></description>
    </item>
    
    <item>
      <title>系统管理和自动化运维(网络篇)</title>
      <link>https://hhs44.github.io/blog/2020-03-13-python-linux%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86%E5%92%8C%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4%E4%B8%80/</link>
      <pubDate>Fri, 13 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://hhs44.github.io/blog/2020-03-13-python-linux%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86%E5%92%8C%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4%E4%B8%80/</guid>
      <description>&lt;p&gt;python的应用领域已经是众所周知的非常广泛，那么在网络上它是怎么大展神通的呢。&lt;/p&gt;
&lt;p&gt;本次主要会介绍：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用python列出网络上活跃的所有主机。&lt;/li&gt;
&lt;li&gt;python中的端口扫描工具&lt;/li&gt;
&lt;li&gt;进行ip管理&lt;/li&gt;
&lt;li&gt;一个DNS工具包&lt;/li&gt;
&lt;li&gt;网络嗅探&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>python3 正则表达式</title>
      <link>https://hhs44.github.io/blog/python3-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
      <pubDate>Wed, 11 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hhs44.github.io/blog/python3-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
      <description>&lt;p&gt;正则表达式是一个特殊的字符序列，它能帮助你方便的检查一个字符串是否与某种模式匹配。re 模块使 Python 语言拥有全部的正则表达式功能。&lt;/p&gt;
&lt;p&gt;首先我们以一个案例引入：&lt;/p&gt;
&lt;p&gt;用户民匹配问题：&lt;/p&gt;
&lt;p&gt;要求：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用户名只能包含数字 字母 下划线&amp;gt;&lt;/li&gt;
&lt;li&gt;不能以数字开头&lt;/li&gt;
&lt;li&gt;长度在 6 到 16 位范围内&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>conda相关（一）</title>
      <link>https://hhs44.github.io/blog/conda%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Wed, 25 Dec 2019 00:00:00 +0800</pubDate>
      
      <guid>https://hhs44.github.io/blog/conda%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>&lt;h1 id=&#34;conda简介&#34;&gt;conda简介&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Conda 是一个开源的软件包管理系统和环境管理系统，用于安装多个版本的软件包及其依赖关系，并在它们之间轻松切换。 Conda 是为 Python 程序创建的，适用于 Linux，OS X 和Windows，也可以打包和分发其他软件。&lt;/p&gt;
&lt;p&gt;Conda作为软件包管理器可以帮助您查找和安装软件包。如果您需要一个需要使用其他版本的Python的软件包，则无需切换到其他环境管理器，因为conda也是环境管理器。仅需几个命令，您就可以设置一个完全独立的环境来运行该不同版本的Python，同时继续在正常环境中运行您通常的Python版本。(来自&lt;a href=&#34;https://docs.conda.io/en/latest/&#34;&gt;官网&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>PyCharm快捷键</title>
      <link>https://hhs44.github.io/blog/pycharm%E5%BF%AB%E6%8D%B7%E9%94%AE%E4%BB%A3%E7%A0%81%E7%BC%96%E8%BE%91%E5%BF%AB%E6%8D%B7%E9%94%AE/</link>
      <pubDate>Mon, 10 Jun 2019 00:00:00 +0800</pubDate>
      
      <guid>https://hhs44.github.io/blog/pycharm%E5%BF%AB%E6%8D%B7%E9%94%AE%E4%BB%A3%E7%A0%81%E7%BC%96%E8%BE%91%E5%BF%AB%E6%8D%B7%E9%94%AE/</guid>
      <description>&lt;h1 id=&#34;代码编辑快捷键&#34;&gt;代码编辑快捷键&lt;/h1&gt;</description>
    </item>
    
  </channel>
</rss>