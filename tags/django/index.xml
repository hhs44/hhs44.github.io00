<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Django on Huanghs blog</title>
    <link>https://hhs44.github.io/tags/django/</link>
    <description>Recent content in Django on Huanghs blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 25 May 2020 21:23:06 +0800</lastBuildDate>
    
	<atom:link href="https://hhs44.github.io/tags/django/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Django的模型和数据库</title>
      <link>https://hhs44.github.io/blog/django%E7%9A%84%E6%A8%A1%E5%9E%8B%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93/</link>
      <pubDate>Mon, 25 May 2020 21:23:06 +0800</pubDate>
      
      <guid>https://hhs44.github.io/blog/django%E7%9A%84%E6%A8%A1%E5%9E%8B%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93/</guid>
      <description>模型和数据库  models（模型）： Making queries（进行查询） Aggregation（聚合） search（搜索） managers（管理人员） Performing raw SQL queries（执行原始SQL查询） Database transactions（数据库事务） Multiple databases（多个数据库） Tablespaces（表空间） Database access optimization（数据库访问优化） Database instrumentation（数据库的检测） Examples of model relationship API usage（模型关系API用法示例）  模型  每一个模型都是一个python类，他是django.db.models.Mode的一个子类。 每个模型的属性的要求对应一个数据库的字段。 基于这些Django提供了一个自动生成的数据库访问api。  快速示例 示例中定义了一个Person，包含了name和gender：
# django中的模板定义 from django.db import modelsclass Person（modles.Model）：name = modles.CharField（max_length=30）gender = models.ChatField（max_length=10）# 构建的数据库 CREATE TABLE myapp_person (&amp;#34;id&amp;#34; serial NOT NULL PRIMARY KEY,&amp;#34;name&amp;#34; varchar(30) NOT NULL,&amp;#34;gender&amp;#34; varchar(10) NOT NULL);注：这里的数据库对应的表名是自动生成的，如果想自定义请了解自动设置。</description>
    </item>
    
    <item>
      <title>Django1.x到django2.x和3.x-踩坑篇</title>
      <link>https://hhs44.github.io/blog/django1.x%E5%88%B0django2.x%E5%92%8C3.x/</link>
      <pubDate>Tue, 19 May 2020 11:18:37 +0800</pubDate>
      
      <guid>https://hhs44.github.io/blog/django1.x%E5%88%B0django2.x%E5%92%8C3.x/</guid>
      <description>最新的版本很多时候都是因为有利于开发而产生的版本，在踩坑结束后新的版本就是自己在开发项目是的神兵利器。踩坑不可避免，踩坑结束就是快乐了。
问题列表：
 pymysql问题（两种方法） 路由变化（和1.x不冲突，新特性） model问题（增加了必须添加的字段）  问题一pymysql问题： 报错为
 django.core.exceptions.ImproperlyConfigured: mysqlclient 1.3.13 or newer is required; you have 0.9.3.  解决： base.py 第 36 行报的错，
根据你的提示路径打开 base.py，
把 35、36 行前面加 # 注释掉就好了
3.0版本只需修改这个一个即可
2.0版本可按照如下修改：</description>
    </item>
    
    <item>
      <title>老知识迁移（一）</title>
      <link>https://hhs44.github.io/blog/%E8%80%81%E7%9F%A5%E8%AF%86%E8%BF%81%E7%A7%BB%E4%B8%80/</link>
      <pubDate>Sun, 15 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hhs44.github.io/blog/%E8%80%81%E7%9F%A5%E8%AF%86%E8%BF%81%E7%A7%BB%E4%B8%80/</guid>
      <description>&lt;p&gt;有前端基础，mysql基础，django基础。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>老知识迁移（二）</title>
      <link>https://hhs44.github.io/blog/%E8%80%81%E7%9F%A5%E8%AF%86%E8%BF%81%E7%A7%BB%E4%BA%8C/</link>
      <pubDate>Sun, 15 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hhs44.github.io/blog/%E8%80%81%E7%9F%A5%E8%AF%86%E8%BF%81%E7%A7%BB%E4%BA%8C/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>